@page "/addition"
@inject IJSRuntime JS

<style>
    .container-fluid {

        height: 100vh;
        background: url(_content/First_step_For_little_mind.Shared/Bg/BlackBoard.jpg)no-repeat;
        background-size: 100vw 100vh;
    }
    .container {
      
        height: 50vh;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        gap: 15px;
        margin-bottom: 10px;
        position: relative;
        margin-top:15px
    }

    .box-group {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .box {
        color:white;
        width: 20vw;
        height: 30vh;
        border: 2px solid white;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
        margin-top: 50px;
        font-size: 60px;
    }

    .item {
        width: 30px;
        height: 30px;
        background-color: red;
        border-radius: 60%;
        margin: 5px;
    }

    .symbol {
        color:white;
        font-size: 40px;
        font-weight: bold;
        /* margin-bottom: 4px; */
    }

    .number-container {
        height: 10vh;
        color:white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 50px;
        gap: 15px;
        margin-bottom: 35px;
    }

    .num-symbol {
        font-size: 26px;
        font-weight: bold;
    }

    .hand {
        position: absolute;
        width: 40px;
        height: 40px;
        transition: all 0.5s ease;
        pointer-events: none;
        z-index: 10;
    }

    button {
        padding: 10px 20px;
        font-size: 18px;
        cursor: pointer;
        background-color:green;
    }

    .additionHeading {
        font-weight:bolder;
        font-size:50px;
        text-align: center;
        color:green;
        text-decoration: underline;
        height: 10vh;
    }

    .number{
        font-size:20px;
        color:white;
    }
    .button {
        margin-top:6rem;
        align-items:center;
        display: flex;
        justify-content: center;
        align-items: center;
        
    }
</style>

<div class="container-fluid">
    <div class="additionHeading">
       Addition
    </div>

    <div class="container">
        <div class="box-group">
            <div class="box" id="box1"></div>
            <div class="number">@num1</div>
        </div>
        <div class="symbol">+</div>
        <div class="box-group">
            <div class="box" id="box2"></div>
            <div class="number">@num2</div>
        </div>
        <div class="symbol">=</div>
        <div class="box-group">
            <div class="box" id="resultBox">@resultText</div>
        </div>

        <img src="_content/First_step_For_little_mind.Shared/Bg/pointer.png" class="hand" id="hand" alt="Hand Pointer" />
    </div>

    <div class="number-container">
        <div>@num1</div>
        <div class="num-symbol">+</div>
        <div>@num2</div>
        <div class="num-symbol">=</div>
        <div>@resultText</div>
    </div>

    <div class="button">
        <button @onclick="StartAnimation">Next</button>
    </div>
</div>

<script>
    window.startAdditionAnimation = (num1, num2, total, dotNetHelper) => {
        const hand = document.getElementById('hand');
        const resultBox = document.getElementById('resultBox');

        function addItems(boxId, count) {
            const box = document.getElementById(boxId);
            box.innerHTML = '';
            for (let i = 0; i < count; i++) {
                const item = document.createElement('div');
                item.className = 'item';
                item.id = `${boxId}-item-${i}`;
                box.appendChild(item);
            }
        }

        function moveHandToElement(element, callback) {
            const itemRect = element.getBoundingClientRect();
            const containerRect = document.querySelector('.container').getBoundingClientRect();
            hand.style.left = (itemRect.left - containerRect.left + 2) + 'px';
            hand.style.top = (itemRect.top - containerRect.top - 1) + 'px';
            setTimeout(callback, 700);
        }

        addItems('box1', num1);
        addItems('box2', num2);
        resultBox.innerHTML = '?';

        const allItems = [
            ...Array.from(document.querySelectorAll(`#box1 .item`)),
            ...Array.from(document.querySelectorAll(`#box2 .item`))
        ];

        let index = 0;

        function pointToNext() {
            if (index < allItems.length) {
                moveHandToElement(allItems[index], () => {
                    index++;
                    pointToNext();
                });
            } else {
                moveHandToElement(resultBox, () => {
                    resultBox.textContent = total;
                    // Also update Blazor UI
                    dotNetHelper.invokeMethodAsync("SetResultText", total.toString());
                });
            }
        }

        setTimeout(() => {
            pointToNext();
        }, 500);
    };
</script>

@code {
    private int num1;
    private int num2;
    private int total;
    private string resultText = "?";
    private DotNetObjectReference<Addition>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await StartAnimation();
        }
    }

    private async Task StartAnimation()
    {
        num1 = GetRandomNumber();
        num2 = GetRandomNumber();
        total = num1 + num2;
        resultText = "?";
        StateHasChanged();
        await JS.InvokeVoidAsync("startAdditionAnimation", num1, num2, total, objRef);
    }

    [JSInvokable]
    public void SetResultText(string value)
    {
        resultText = value;
        StateHasChanged(); // Re-render both resultBox and number-container
    }

    private int GetRandomNumber()
    {
        return Random.Shared.Next(1, 11);
    }
}
