@page "/Learn/{letter}"
@inject IJSRuntime JS
@using First_step_For_little_mind.Shared.List;

<div class="container-fluid">
	<div class="container text-center">

		<!-- Image or Quiz Area -->
		<div class="FSLM-WordImg d-flex justify-content-center align-items-center" style="height: 300px;">
			@if (currentIndex < selectedWords.Count)
			{
				<img src="@GetImagePath(selectedWords[currentIndex])" alt="Image of @selectedWords[currentIndex]" />
			}
			else
			{
				<!-- Quiz Section -->
				<div class="container game-Container">
					<div class="img @(isVibrating ? "vibrate" : "")">
						<img src="@GetImagePath(CurrentQuiz)" alt="Quiz Word" style="max-width: 80%; max-height: 80%;" />
					</div>
					<div class="option">
						@foreach (var option in CurrentOptions)
						{
							<button class="btn-option @GetButtonClass(option)" @onclick="@(() => CheckAnswer(option))" disabled="@hasAnswered">
								@option
								@if (hasAnswered)
								{
									if (option == CurrentQuiz)
									{
										<span> ✅</span>
									}
									else if (option == selectedAnswer && option != CurrentQuiz)
									{
										<span> ❌</span>
									}
								}
							</button>
						}
					</div>
				</div>
			}
		</div>

		<!-- Word Spelling with Colored Letters -->
		@if (currentIndex < selectedWords.Count)
		{
			<div class="FSLM-Word mt-3">
				@foreach (var (ch, index) in selectedWords[currentIndex].Select((c, i) => (c, i)))
				{
					<span class="color-@(@index % 7)">@ch</span>
				}
			</div>
		}

		<!-- Navigation Buttons -->
		<div class="Button mt-4">
			<button class="btn btn-primary" @onclick="ShowPreviousWord" disabled="@(currentIndex == 0)">Previous</button>
			<button class="btn btn-primary ms-2" @onclick="ShowNextWord">Next</button>
		</div>

	</div>
</div>

@code {
	[Parameter]
	public string? letter { get; set; }

	private List<string> selectedWords = new();
	private int currentIndex = 0;

	private List<string> quizPool = new();
	private List<string> selectedQuizWords = new();
	private int CurrentQuizIndex = 0;
	private string CurrentQuiz => selectedQuizWords[CurrentQuizIndex];
	private List<string> CurrentOptions = new();

	private bool hasAnswered = false;
	private string selectedAnswer = string.Empty;
	private bool isVibrating = false;

	protected override void OnParametersSet()
	{
		List<string> sourceList = new();

		if (letter?.ToLower() == "threeletterword")
		{
			sourceList = RequiredList.ThreeLetterWords;
		}
		else if (letter?.ToLower() == "fourletterword")
		{
			sourceList = RequiredList.FourLetterWords;
		}

		if (sourceList.Count > 0)
		{
			selectedWords = sourceList.OrderBy(x => Guid.NewGuid()).Take(10).ToList();
			quizPool = sourceList;
			selectedQuizWords = quizPool.OrderBy(x => Guid.NewGuid()).Take(5).ToList();
			CurrentQuizIndex = 0;
			LoadOptions();
		}
		else
		{
			selectedWords = new() { "Word Not Found" };
		}

		currentIndex = 0;
	}

	private void ShowNextWord()
	{
		if (currentIndex < selectedWords.Count)
		{
			currentIndex++;
		}
	}

	private void ShowPreviousWord()
	{
		if (currentIndex > 0)
		{
			currentIndex--;
		}
	}

	private string GetImagePath(string word)
	{
		return $"_content/First_step_For_little_mind.shared/WordsLearning/{word}.jpg";
	}

	private void LoadOptions()
	{
		hasAnswered = false;
		isVibrating = false;
		selectedAnswer = string.Empty;

		var rng = new Random();
		var incorrect = quizPool.Except(new[] { CurrentQuiz }).OrderBy(x => rng.Next()).Take(2).ToList();
		CurrentOptions = incorrect.Append(CurrentQuiz).OrderBy(x => rng.Next()).ToList();
	}

	private async void CheckAnswer(string option)
	{
		if (hasAnswered) return;
		hasAnswered = true;
		selectedAnswer = option;

		if (option != CurrentQuiz)
		{
			isVibrating = true;
			await Task.Delay(500);
			isVibrating = false;
		}

		await Task.Delay(2000);
		if (CurrentQuizIndex < selectedQuizWords.Count - 1)
		{
			CurrentQuizIndex++;
			LoadOptions();
			StateHasChanged();
		}
	}

	private string GetButtonClass(string option)
	{
		if (!hasAnswered) return "";
		if (option == CurrentQuiz) return "correct";
		if (option == selectedAnswer && option != CurrentQuiz) return "wrong";
		return "";
	}
}
