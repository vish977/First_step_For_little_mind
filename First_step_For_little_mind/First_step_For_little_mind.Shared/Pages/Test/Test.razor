@page "/voicematch"
@inject IJSRuntime JS

<h2 class="text-xl font-bold text-center mt-5">🎤 Voice to Text Match</h2>

<div class="text-center mt-4">
    <p><strong>Expected:</strong> @expectedText</p>
    <button @onclick="StartRecognition" class="bg-blue-600 text-white py-2 px-4 rounded-lg mt-3">Start Speaking</button>

    <p class="mt-5 text-lg">You said: <strong>@spokenText</strong></p>
    <p class="mt-2 text-xl font-bold">@feedback</p>
</div>


<script>
        window.startSpeechRecognition = (dotNetRef) => {
        if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
            alert("Speech recognition not supported.");
            return;
        }

        const recognition = new(window.SpeechRecognition || window.webkitSpeechRecognition)();
        recognition.lang = 'en-US';

        recognition.onresult = function (event) {
            const spokenText = event.results[0][0].transcript;
            dotNetRef.invokeMethodAsync('ReceiveSpeechText', spokenText);
        };

        recognition.onerror = function (event) {
            dotNetRef.invokeMethodAsync('ReceiveSpeechText', `Error: ${event.error}`);
        };

        recognition.start();
    };

</script>

@code {
    string expectedText = "A for Apple";
    string spokenText = "";
    string feedback = "";

    async Task StartRecognition()
    {
        await JS.InvokeVoidAsync("startSpeechRecognition", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ReceiveSpeechText(string text)
    {
        spokenText = text;
        if (spokenText.ToLower().Contains(expectedText.ToLower()))
        {
            feedback = "✅ Correct! Great job!";
        }
        else
        {
            feedback = "❌ Try again!";
        }
        StateHasChanged();
    }
}
