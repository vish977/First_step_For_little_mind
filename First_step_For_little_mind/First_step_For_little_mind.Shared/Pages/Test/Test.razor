@page "/trace"
@inject IJSRuntime JS

<h3>Trace the Letter A</h3>

<canvas id="myCanvas" width="600" height="400" style="border:1px solid black;"></canvas>

<button @onclick="ClearCanvas">Clear</button>

<script>
    window.initializeCanvas = () => {
        var canvas = document.getElementById("myCanvas");
        var ctx = canvas.getContext("2d");
        var isDrawing = false;
        var lastX = 0, lastY = 0;

        function drawLetter() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.font = "200px Arial";
            ctx.fillStyle = "black";
            ctx.fillText("A", 150, 250);
        }

        drawLetter();

        canvas.addEventListener("mousedown", (e) => {
            var x = e.offsetX, y = e.offsetY;
            if (isInsideLetter(x, y)) {
                isDrawing = true;
                lastX = x;
                lastY = y;
            }
        });

        canvas.addEventListener("mousemove", (e) => {
            if (!isDrawing) return;
            var x = e.offsetX, y = e.offsetY;

            if (isInsideLetter(x, y)) {
                ctx.strokeStyle = "red";
                ctx.lineWidth = 15;
                ctx.lineJoin = "round";
                ctx.lineCap = "round";

                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(x, y);
                ctx.stroke();

                lastX = x;
                lastY = y;
            }
        });

        canvas.addEventListener("mouseup", () => isDrawing = false);

        function isInsideLetter(x, y) {
            var imageData = ctx.getImageData(x, y, 1, 1).data;
            return imageData[0] === 0 && imageData[1] === 0 && imageData[2] === 0;
        }
    };

    window.clearCanvas = () => {
        var canvas = document.getElementById("myCanvas");
        var ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.font = "200px Arial";
        ctx.fillStyle = "black";
        ctx.fillText("A", 150, 250);
    };
</script>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeCanvas");
        }
    }

    private async Task ClearCanvas()
    {
        await JS.InvokeVoidAsync("clearCanvas");
    }
}
