@page "/vowel-Consonant"
@inject IJSRuntime JS

<style>
    .screen {
        position: relative;
        height: 100vh;
        width: 100vw;
        background: url("_content/First_step_For_little_mind.Shared/Bg/BlackBoard.jpg") no-repeat;
        background-size: 100vw 100vh;
    }

    .Board {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 57rem;
        height: 22rem;
        opacity: 0.8;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        font-weight: bold;
        color: white;
        transition: all 1s ease;
        text-align: center;
    }

    .one {
        z-index: 3;
        flex-direction: column;
        background: url("_content/First_step_For_little_mind.Shared/Bg/GreenBoard.jpg") no-repeat center;
        background-size: 100vw 100vh;
    }

    .Two {
        background: url("_content/First_step_For_little_mind.Shared/Bg/VowelConsonent.png") no-repeat center;
        background-size: 74vw 59vh;
        z-index: 2;
        opacity: 0;
        transform: scale(0);
        transition: all 1s ease;
    }

    .Three {
        background: url("_content/First_step_For_little_mind.Shared/Bg/GreenBoard.jpg") no-repeat center;
        background-size: 100vw 100vh;
        z-index: 1;
        opacity: 0;
        transform: scale(0);
        transition: all 1s ease;
        display:flex;
        flex-direction:column;
        
    }

    .visible {
        opacity: 1 !important;
        transform: translate(-50%, -50%) scale(1) !important;
    }

    .hidden {
        opacity: 0 !important;
        transform: translate(-50%, -50%) scale(0) !important;
    }

    .alphabet-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: center;
        max-width: 35rem;
        margin-top: 1rem;
    }

    .alphabet-grid span {
        width: 3rem;
        text-align: center;
    }

    .vowel-row {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
        font-size: 2rem;
        justify-content: center;
    }
</style>

<div class="screen">
    <button @onclick="TogglePlay">
        <img src="_content/First_step_For_little_mind.Shared/Bg/play.png" alt="Play" height="50" />
    </button>
    <button @onclick="PauseAudio">
        <img src="_content/First_step_For_little_mind.Shared/Bg/pause.png" alt="Pause" height="50" />
    </button>

    <div class="Board one" style="@box1Style">
        Vowels and Consonents
        <div>
            @if (showAZ)
            {
                <div class="alphabet-grid">
                    @foreach (var letter in alphabets)
                    {
                        <span>@letter</span>
                    }
                </div>
            }

            @if (showVowels)
            {
                <div class="vowel-row">
                    @foreach (var v in vowelsToShow)
                    {
                        <span>@v</span>
                    }
                </div>
            }
        </div>
    </div>

    <div class="Board Two @(box2Visible ? "visible" : "hidden")">
       
    </div>

    <div class="Board Three @(box3Visible ? "visible" : "hidden")">
        <h1 class="text-center text-2xl font-bold text-gray-800">Choose the vowels</h1>
        <div class="flex justify-center mt-8 flex-wrap gap-4">
        @if (CurrentWord != null)
        {
            foreach (char letter in CurrentWord)
            {
                <button class="text-2xl px-4 py-2 rounded bg-gray-200 hover:bg-blue-200 transition"
                        disabled="@IsLocked"
                        @onclick="() => CheckLetter(letter)">
                    @letter
                </button>
            }
        }
    </div>

    <p class="text-center mt-6 text-xl font-semibold" style="color:@(string.IsNullOrEmpty(MessageColor) ? "black" : MessageColor)">
        @Message
    </p>

    <div class="text-center mt-4">
        <p class="text-lg font-medium">✅ Correct: @CorrectCount | ❌ Wrong: @WrongCount</p>
    </div>

    @if (CurrentWord == null)
    {
        <div class="text-center mt-6">
            <button class="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700"
                    @onclick="RestartGame">
                🔁 Play Again
            </button>
        </div>
    }

    </div>
</div>

<audio id="letterAudio" autoplay onended="notifyAudioEnd()">
    <source src="_content/First_step_For_little_mind.Shared/voice/Vowels.mp3" type="audio/mpeg">
    Your browser does not support the audio element.
</audio>

<script>
    let animationPaused = false;

    window.playAudio = function () {
        let audio = document.getElementById("letterAudio");
        if (audio.paused) {
            audio.play();
        } else if (window.audioEnded) {
            location.reload();
        }
        window.resumeAnimation();
    };

    window.pauseAudio = function () {
        let audio = document.getElementById("letterAudio");
        if (!audio.paused) {
            audio.pause();
        }
        window.pauseAnimation();
    };

    window.pauseAnimation = function () {
        animationPaused = true;
    };

    window.resumeAnimation = function () {
        animationPaused = false;
    };
</script>

@code {
    private bool showAZ = false;
    private bool showVowels = false;
    private List<string> alphabets = new();
    private List<string> vowelsToShow = new();
    private string[] vowels = { "A", "E", "I", "O", "U" };

    private string box1Style = "";
    private bool box2Visible = false;
    private bool box3Visible = false;

    private bool isPaused = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _ = RunAnimationSequence();
        }
    }

    private async Task RunAnimationSequence()
    {
        await WaitIfPaused(5000);

        showAZ = true;
        GenerateAlphabetList();
        StateHasChanged();
        await WaitIfPaused(7000);

        showAZ = false;
        StateHasChanged();
        await WaitIfPaused(1000);

        showVowels = true;
        vowelsToShow.Clear();
        foreach (var v in vowels)
        {
            vowelsToShow.Add(v);
            StateHasChanged();
            await WaitIfPaused(2000);
        }

        await WaitIfPaused(2000);

        box1Style = "opacity: 0; transform: translate(-50%, -50%) scale(0); transition: all 1s ease;";
        StateHasChanged();
        await WaitIfPaused(998);

        box2Visible = true;
        StateHasChanged();
        await WaitIfPaused(6000);

        box2Visible = false;
        StateHasChanged();
        await WaitIfPaused(1000);

        box3Visible = true;
        StateHasChanged();
    }

    private async Task WaitIfPaused(int ms)
    {
        int interval = 100;
        int waited = 0;
        while (waited < ms)
        {
            if (!isPaused)
            {
                await Task.Delay(interval);
                waited += interval;
            }
            else
            {
                await Task.Delay(100);
            }
        }
    }

    private void GenerateAlphabetList()
    {
        alphabets = Enumerable.Range('A', 26).Select(c => ((char)c).ToString()).ToList();
    }

    private async Task TogglePlay()
    {
        isPaused = false;
        await JS.InvokeVoidAsync("playAudio");
    }

    private async Task PauseAudio()
    {
        isPaused = true;
        await JS.InvokeVoidAsync("pauseAudio");
    }


    private List<string> AllWords = new()
    {
        "APPLE", "ORANGE", "GRAPE", "MANGO", "BANANA", "WATER", "FISH", "CHAIR", "STOOL", "PEACH",
        "PENCIL", "TABLE", "EAGLE", "BIRD", "LION", "ZEBRA", "UMBRELLA", "EGG", "ANT", "ICE",
        "OLIVE", "DESK", "BAG", "FROG", "BOTTLE", "CAMEL", "DUCK", "EEL", "FAN", "GOAT",
        "HOUSE", "INK", "JUG", "KITE", "LEAF", "MOON", "NEST", "OWL", "PIG", "QUEEN",
        "RAT", "SUN", "TREE", "URANUS", "VAN", "WIND", "XMAS", "YAK", "ZIP", "BULB"
    };

    private List<string> SelectedWords = new();
    private string? CurrentWord;
    private int CurrentWordIndex = 0;
    private string Message = "";
    private string MessageColor = "black";
    private HashSet<char> vowelSet = new() { 'A', 'E', 'I', 'O', 'U' };
    private bool IsLocked = false;
    private int CorrectCount = 0;
    private int WrongCount = 0;

    protected override void OnInitialized()
    {
        RestartGame();
    }

    private async Task CheckLetter(char letter)
    {
        if (IsLocked || string.IsNullOrEmpty(CurrentWord)) return;

        IsLocked = true;

        if (vowelSet.Contains(Char.ToUpper(letter)))
        {
            Message = $"✅ Well Done! '{letter}' is a vowel.";
            MessageColor = "green";
            CorrectCount++;
        }
        else
        {
            Message = $"❌ Wrong! '{letter}' is a consonant.";
            MessageColor = "red";
            WrongCount++;
        }

        StateHasChanged(); 

        await Task.Delay(2000);
        LoadNextWord();
    }

    private void LoadNextWord()
    {
        if (CurrentWordIndex < SelectedWords.Count)
        {
            CurrentWord = SelectedWords[CurrentWordIndex];
            CurrentWordIndex++;
            Message = "";
            MessageColor = "black";
            IsLocked = false;
        }
        else
        {
            CurrentWord = null;
            Message = "🎉 Game Over! You completed all the words.";
            MessageColor = "blue";
            IsLocked = true;
        }
    }

    private void RestartGame()
    {
        var rnd = new Random();
        SelectedWords = AllWords.OrderBy(_ => rnd.Next()).Take(10).ToList();
        CurrentWordIndex = 0;
        CorrectCount = 0;
        WrongCount = 0;
        IsLocked = false;
        LoadNextWord();
    }
}


