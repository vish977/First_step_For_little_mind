@page "/Test"


<style>
    body{
        background:gray;
    }
    .tools{
        display:flex;
        justify-content:center;
        flex-direction:row;
        margin-top:50px;

    }
    .colorFiled{
        height:40px;
        width:40px;
        min-height:40px;
        min-width:40px;
        border:1px solid black;
        box-sizing:border-box;
        border-radius:50%;
        cursor:pointer;
        display:inline-block;
        align-self:center;
        margin: 0 15px;
    }
    .button {
        align-self:center;
        width:100px;
        height:40px;
        border:1px solid white;
        cursor:pointer;
        color:white;
        background:#222;
        font-weight:bold;
        margin:0 15px;

    }
    .colorPicker{
        align-self:center;
        margin:0 15px;
        height:50px;
    }
    .penRange{
        align-self:center;
        margin:0 10px;
    
    }
    canvas {
        box-shadow:-3px 2px 9px 6px black;
        cursor:pointer;
        /* background:red; */
        margin-top:15px;
        margin-left:15px;

        /* border: 2px solid black; */

    }
</style>

<canvas id="canvas"></canvas>
<div class="tools">
    <button onclick="undo()" type="button" class="button">undo</button>
    <button onclick="clearCanvas()" type="button" class="button">clear</button>
    <div onclick="change_color(this)" class="colorFiled" style="background: red"></div>
    <div onclick="change_color(this)" class="colorFiled" style="background: green"></div>
    <div onclick="change_color(this)" class="colorFiled" style="background: yellow"></div>
    <div onclick="change_color(this)" class="colorFiled" style="background: blue"></div>

    <input oninput="draw_color = this.value" type="color" class="colorPicker" />
    <input type="range" min="1" max="100" class="penRange" oninput="draw_width=this.value"/>
</div>
<script>
    var canvas = document.getElementById('canvas');
    canvas.width = window.innerWidth-60;
    canvas.height =400;

    var ctx = canvas.getContext("2d");
    var startBackgroundColor = "white";
    ctx.fillStyle = startBackgroundColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);


    var draw_color = "black";
    var draw_width = "2";
    var is_draw = "false";

    var restore_array = [];
    var index = -1;
 

    function change_color(element){
        draw_color = element.style.background;
        console.log("hello");
    }

    canvas.addEventListener("touchstart", start, false);
    canvas.addEventListener("touchmove", draw, false);
    canvas.addEventListener("mousedown", start, false);
    canvas.addEventListener("mousemove", draw, false);

    canvas.addEventListener("touchend", stop, false);
    canvas.addEventListener("mouseup", stop, false);
    canvas.addEventListener("mouseout", stop, false);

    function start(event){
        is_draw = true;
        ctx.beginPath();
        ctx.moveTo(event.clientX -  canvas.offsetLeft, event.clientY - canvas.offsetTop);
        event.preventDefault();
    }

    function draw(event){
        if(is_draw){
            ctx.lineTo(event.clientX -  canvas.offsetLeft, event.clientY - canvas.offsetTop);
            ctx.strokeStyle = draw_color;
            ctx.lineWidth =draw_width;
            ctx.lineCap ="round";
            ctx.lineJoin =   "round";
            ctx.stroke();
        }
    }

    function stop(event){
        if(is_draw){
            ctx.stroke();
            ctx.closePath();
            is_draw = false;
        }
        event.preventDefault();
        if(event.type!= 'mouseout'){
            restore_array.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
            index +=1;
        }
         
    }

    function clearCanvas(){
        ctx.fillStyle =startBackgroundColor;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        restore_array =[];
        index = -1;

    }

    function undo(){
        index -= 1;
        restore_array.pop();
        ctx.putImageData(restore_array[index], 0, 0);
        restore_array.push(ctx.getImageData(0, 0, canvas.width, canvas.height));

        if (!(restore_array[index] instanceof ImageData)) {
        restore_array[index] = new ImageData(new Uint8ClampedArray(restore_array[index].data), canvas.width, canvas.height);
        }
        ctx.putImageData(restore_array[index], 0, 0);


    }

  

   
</script>

