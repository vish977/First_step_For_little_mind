@inject IJSRuntime JS

@code {
    [Parameter] public string? Letter { get; set; }
}

<link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@600&display=swap" rel="stylesheet" />

<style>
    .resize-div {
        background: url("@($"/_content/First_step_For_little_mind.Shared/Image/English/Letter/{Letter}.png")") no-repeat;
        background-size: 100%;
        background-position: top;
    }

    input[type="color"] {
        background-color: white;
    }

   
</style>

<div id="carouselExample" class="carousel slide">
    <div class="carousel-inner">
        <div class="carousel-item main first active">
            <div class="resize-div" id="resizeDiv"></div>
            <div class="container FSLM-Word">
                @foreach (var item in items)
                {
                    <div class="card box">
                        <img src="@($"_content/First_step_For_little_mind.Shared/Image/English/LetterRelatedImage/{item}.jpeg")"
                             alt="@item"
                             class="@(item == "Astronout" ? "astronout-img" : "")"
                             style="width:100%" />
                        <div class="container">
                            <h4 class="gradient-text"><b>@item</b></h4>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="carousel-item main second">
            <div class="container-fluid FSLM-Box d-flex flex-column align-items-center">
                <canvas id="myCanvas" width="500" height="400" style="border:1px solid black; max-width: 600px;"></canvas>

                <div class="row mt-3 w-100 justify-content-center" style="max-width: 600px;">
                    <div class="col-12 col-md-6 d-flex flex-column align-items-center align-items-md-start mb-2 mb-md-0">
                        <label for="colorPicker" class="form-label"><b>Choose Your Color:</b></label>
                        <input type="color" id="colorPicker" class="form-control-color" value="#000000" />
                    </div>

                    <div class="col-12 col-md-6 d-flex justify-content-center justify-content-md-end">
                        <button @onclick="ClearCanvas" class="btn btn-primary">Clear</button>
                    </div>
                </div>
            </div>
        </div>


    </div>

    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

<audio id="letterAudio" autoplay>
    <source src="@($"_content/First_step_For_little_mind.Shared/voice/{Letter}.mp3")" type="audio/mpeg">
    Your browser does not support the audio element.
</audio>

<audio id="successAudio">
    <source src="_content/First_step_For_little_mind.Shared/voice/clapping.mp3" type="audio/mpeg" />
    Your browser does not support the audio element.
</audio>

<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>


@code {
    string[] items = Array.Empty<string>();

    protected override void OnParametersSet()
    {
        items = Letter?.ToUpper() switch
        {
            "A" => new string[] { "Apple", "Aeroplane", "Ant", "Astronout" },
            "B" => new string[] { "Bat", "Ball", "Boy", "Bag" },
            "C" => new string[] { "Cat", "Cap", "Cup", "Cow" },
            "D" => new string[] { "Dog", "Doll", "Donkey", "Duck" },
            "E" => new string[] { "Elephant", "Egg", "Eye", "Ear" },
            "F" => new string[] { "Flag", "Fish", "Fan", "Frog" },
            "G" => new string[] { "Girl", "Goat", "Giraff", "Grapes" },
            "H" => new string[] { "Hen", "Hat", "House", "Helicopter" },
            "I" => new string[] { "Ink", "Ice", "Ice-Cream", "Iron" },
            "J" => new string[] { "Jug", "Joker", "Jacket", "Jackal" },
            "K" => new string[] { "Kite", "Kangaroo", "King", "Key" },
            "L" => new string[] { "Lion", "Lemon", "Lamp", "Leaf" },
            "M" => new string[] { "Monkey", "Mango", "Moon", "Mushroom" },
            "N" => new string[] { "Nest", "Net", "Nail", "Notebook" },
            "O" => new string[] { "Orange", "Owl", "Octopus", "Onion" },
            "P" => new string[] { "Parrot", "Pumpkin", "Peacock", "Pineapple" },
            "Q" => new string[] { "Queen", "Quilt", "Quail", "Quiz" },
            "R" => new string[] { "Rabbit", "Rose", "Rainbow", "Rocket" },
            "S" => new string[] { "Sun", "Star", "Ship", "Snail" },
            "T" => new string[] { "Tiger", "Tomato", "Tree", "Turtle" },
            "U" => new string[] { "Umbrella", "Utensil", "Uniform", "Urn" },
            "V" => new string[] { "Van", "Vulture", "Violin", "Vase" },
            "W" => new string[] { "Whale", "Watermelon", "Watch", "Wolf" },
            "X" => new string[] { "Xylophone", "X-ray", "Xerox", "Xmas" },
            "Y" => new string[] { "Yak", "Yogurt", "Yarn", "Yellow" },
            "Z" => new string[] { "Zebra", "Zip", "Zoo", "Zero" },
            _ => Array.Empty<string>()
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(Letter))
        {
            try
            {
                await JS.InvokeVoidAsync("initializeCanvas", Letter); // Pass the letter here
            }
            catch (TaskCanceledException)
            {
                Console.WriteLine("JS initialization was cancelled or took too long.");
            }
        }
    }

    private async Task ClearCanvas()
    {
        await JS.InvokeVoidAsync("clearCanvas", Letter);
    }
}
